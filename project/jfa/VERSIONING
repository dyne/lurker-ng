JFA uses the standard x.y.z versioning scheme, where:
	x = major version
	y = minor version
	z = patch level


There are three ways that software depends on JFA:
	source dependency
		Software which uses JFA directly depend on the JFA API.
		
		Write dependencies like: libjfa (>= x.y.z && < x+1.0.0)
	
	binary dependency
		Software which is directly or indirectly linked to JFA
		depend on the JFA ABI and JFA database format.

		Write dependencies like: libjfax (>= x.y.0)
		Note the 'x' in the libjfax - this he major version.
	
	runtime dependency
		Software which uses other software that has a binary
		dependency on JFA. I cannot help you in this scenario,
		whatever promises the tool you using makes is all you have.


I promise that:
	
	if you write source code which uses JFA version x.y.z, 
	this source code should continue to compile for all versions a.b.c 
	where a == x && (b > y || (b == y && c >= z)).
	
	if you compile source code which links to JFA version x.y.z, 
	this object file should continue to operate for all versions a.b.c 
	where a == x && b >= y.
	
	all patchlevels have the same database format.
	
	any new minor version will automatically convert an 
	older minor version's database format to it's own.
	
	two different major versions of the ABI can coexist.

	
I do NOT promise that:

	the database format is static between minor version changes. [1]

	two different versions of the API can be installed at the same time.
	
	anything not expressly demonstrated in the documentation will compile.


---

1:	On database compatability and static linkage: DON'T DO IT!

	As mentioned above, I may change the format of JFA databases in a
	MINOR version change. Consider the following:

	foo uses libjfa 1.2 statically
	bar uses libjfa 1.3 statically
	
	foo creates a database and operates on it
	foo opens the database later and uses it again (no problems)
	bar opens the database and operates on it (converting it to 1.3)
	foo tries to open the database and fails -- the database is now v1.3
	
	To prevent this from happening, you should NEVER statically link to
	libjfa. You should link to a shared version of libjfa. Then, if bar
	gets installed, a new libjfa (1.3 or higher) is installed and foo
	automatically starts using this.
