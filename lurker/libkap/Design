libkap is a library for keyword appends.

It was custom written for lurker when it became clear that databases
presently available are just not fast enough for large scale keyword
imports. kap is designed for the utmost possible efficiency with append 
and read only keyword databases.

libkap consists of four stackable layers:

Layer btree:

	A high branch-factor btree implementation with run-length
	compression.
	
	This interface provides a simple keyword (char* null-terminated) to
	small record size lookup tree. This tree is generally held entirely
	in a mmap. The intention is that with a branch factor >2000 you can
	find the target key out of 4 billion records in one seek or less
	(since your kernel will likely cache the 2000 level-1 nodes). More
	importantly, you should be able to add to the tree with about one
	write (or three if you need more firm write guarantees).

Layer append:

	A database designed for fast appends and random	access records.
	
	The on disk format of this file guarantees logarithmic fragmentation
	with less than 50% space wastage in the worst case.
	
	This layer allows you to append a buffer to a given record in a
	single write. Also, every access within a record can be resolved to
	a disk location without touching the disk.
	
	This layer has handles which must be stored somewhere. They consume
	12-252 (or 508) bytes. The function is 12 + 4*floor(log2(n)).

Layer wbuffer:

	A provably optimal frequency balancing write buffer.
	
	This buffer will use memory for buffering single entry appends to a
	keyword buffer. It uses both the append and btree layers. For email
	word frequencies, the buffer is successful 95% of the time with only
	4Mb and the failure rate falls off linearly with the buffer size.

Layer rbuffer:

	A read buffer for allowing fragmented reads from a keyword.
	
	This provides a mechanism for searching for the largest record with
	a given property, and read-combining.

Design goals:

	Absolute miminum number of disk seeks when appending to an index
	Random seeks within a record must be supported
		(needed for sub-linear set-intersection)
	Should allow all disk parameters to be configurable
	Should not depend on anything other than libc
	Should be designed with an OOP interface
	Layer buffer and btree should support operation on a block device
